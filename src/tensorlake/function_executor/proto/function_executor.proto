syntax = "proto3";

package function_executor_service;

import "tensorlake/function_executor/proto/google/rpc/status.proto";

// The messages should not use any Python SDK objects. Only Function Executor implemented
// in Python is allowed to import Python SDK to run customer functions. This ensures that
// all the other components can be written in any language.

enum SerializedObjectEncoding {
    SERIALIZED_OBJECT_ENCODING_UNKNOWN = 0;
    SERIALIZED_OBJECT_ENCODING_UTF8_JSON = 1;
    SERIALIZED_OBJECT_ENCODING_UTF8_TEXT = 2;
    SERIALIZED_OBJECT_ENCODING_BINARY_PICKLE = 3;
    SERIALIZED_OBJECT_ENCODING_BINARY_ZIP = 4;
}

// Complete serialized object passed in a single message without any chunking.
message SerializedObject {
    optional bytes data = 1;
    optional SerializedObjectEncoding encoding = 2;
    optional uint64 encoding_version = 3;
}

// InitializeRequest contains information about the function
// that Function Executor is going to run the tasks for.
message InitializeRequest {
    optional string namespace = 1;
    optional string graph_name = 2;
    optional string graph_version = 3;
    optional string function_name = 5;
    optional SerializedObject graph = 7;
}

enum InitializationOutcomeCode {
    INITIALIZE_OUTCOME_CODE_UNKNOWN = 0;
    INITIALIZE_OUTCOME_CODE_SUCCESS = 1;
    INITIALIZE_OUTCOME_CODE_FAILURE = 2;
}

enum InitializationFailureReason {
    INITIALIZATION_FAILURE_REASON_UNKNOWN = 0;
    INITIALIZATION_FAILURE_REASON_INTERNAL_ERROR = 1;
    INITIALIZATION_FAILURE_REASON_FUNCTION_ERROR = 2;
}

message InitializeResponse {
    optional InitializationOutcomeCode outcome_code = 1;
    optional InitializationFailureReason failure_reason = 2;
    optional string stdout = 3;
    optional string stderr = 4;
}

message SetInvocationStateRequest {
    optional string key = 1;
    optional SerializedObject value = 2;
}

message SetInvocationStateResponse {
    optional google.rpc.Status status = 1;
}

message GetInvocationStateRequest {
    optional string key = 1;
}

message GetInvocationStateResponse {
    optional string key = 1;
    optional SerializedObject value = 2;
    optional google.rpc.Status status = 3;
}

// InvocationStateRequest is sent by RPC Server to the client
// to perform actions on a task's graph invocation state.
message InvocationStateRequest {
    // The ID of the request sent by the client.
    // Must be unique per Function Executor.
    optional string request_id = 1;
    // The ID of the task initiated the request.
    optional string task_id = 2;
    oneof request {
        SetInvocationStateRequest set = 3;
        GetInvocationStateRequest get = 4;
    }
}

// InvocationStateResponse is sent by RPC client to the Server.
// A response contains the result of the action performed on the
// task's graph invocation state.
message InvocationStateResponse {
    // The id of the request this response is for.
    optional string request_id = 1;
    optional bool success = 2;
    oneof response {
        SetInvocationStateResponse set = 3;
        GetInvocationStateResponse get = 4;
    }
}

message RunTaskRequest {
    optional string namespace = 1;
    optional string graph_name = 2;
    optional string graph_version = 3;
    optional string function_name = 4;
    optional string graph_invocation_id = 5;
    optional string task_id = 6;
    optional string allocation_id = 9;
    optional SerializedObject function_input = 7;
    optional SerializedObject function_init_value = 8;
}

message Metrics {
    map<string, float> timers = 1;
    map<string, uint64> counters = 2;
}

enum TaskOutcomeCode {
    TASK_OUTCOME_CODE_UNKNOWN = 0;
    TASK_OUTCOME_CODE_SUCCESS = 1;
    TASK_OUTCOME_CODE_FAILURE = 2;
}

enum TaskFailureReason {
    TASK_FAILURE_REASON_UNKNOWN = 0;
    TASK_FAILURE_REASON_INTERNAL_ERROR = 1;
    TASK_FAILURE_REASON_FUNCTION_ERROR = 2;
    TASK_FAILURE_REASON_INVOCATION_ERROR = 3;
}

message RunTaskResponse {
    optional string task_id = 1;
    repeated SerializedObject function_outputs = 2;
    // Edges that the function wants the invocation to be routed to.
    repeated string next_functions = 3;
    optional string stdout = 4;
    optional string stderr = 5;
    optional bool is_reducer = 6;
    optional Metrics metrics = 7;
    optional TaskOutcomeCode outcome_code = 8;
    optional TaskFailureReason failure_reason = 9;
    // User payload for invocation error if task failed with invocation error.
    optional SerializedObject invocation_error_output = 10;
}

message HealthCheckRequest {}

message HealthCheckResponse {
    optional bool healthy = 1;
    optional string status_message = 2;
}

message InfoRequest {}

message InfoResponse {
    // Internal version of this Function Executor.
    // Semantic versioning schema is used with format 0.0.0.
    // Used to support migrations.
    optional string version = 1;
    // The version of the SDK used in this Function Executor to run customer code.
    optional string sdk_version = 2;
    // The language of the SDK. Currently supported values:
    // - "python"
    optional string sdk_language = 3;
    // The version of the SDK language. The language's versioning format is used.
    optional string sdk_language_version = 4;
}

// === run_task_allocations_session RPC === //

message SerializedObjectID {
    optional string value = 1;
}

message SerializedObjectManifest {
    optional SerializedObjectID id = 1;
    optional SerializedObjectEncoding encoding = 2;
    optional uint64 encoding_version = 3;
    optional uint64 size = 4;
    optional string sha256_hash = 5;
}

message SerializedObjectChunk {
    // The ID of the serialized object this chunk belongs to.
    optional SerializedObjectID id = 1;
    // The chunk data.
    optional bytes data = 2;
}

// Used for uploading a serialized object from initiating side to the accepting side.
message UploadSerializedObjectRequest {
    oneof message {
        SerializedObjectManifest manifest = 1;
        SerializedObjectChunk chunk = 2;
    }
}

// The accepting side sends a response per request.
message UploadSerializedObjectResponse {
    optional google.rpc.Status status = 1;
    optional SerializedObjectID id = 2;
}

// Joins run_task_allocations_session streams to a session with a given ID.
// A new session is created if it doesn't exist yet. Otherwise, the streams join the existing session.
// Each session can only have a single pair of streams joined to it at any moment.
message OpenSessionRequest {
    // The ID of the session to associate the session streams with.
    optional string session_id = 1;
}

// Leaves the session associated with the run_task_allocations_session streams and closes the streams.
// If close is true release all the session resources. Example resources: function inputs, function outputs, etc.
message LeaveSessionRequest {
    optional bool close = 1;
}

message TaskAllocationInput {
    optional string graph_invocation_id = 1;
    optional string task_id = 2;
    optional string allocation_id = 3;
    optional SerializedObjectID function_input_id = 4;
    optional SerializedObjectID function_init_value_id = 5;
}

message RunTaskAllocationsRequest {
    // Task allocations and their inputs to run.
    // Currently, only one task allocation input is allowed until batching gets implemented.
    repeated TaskAllocationInput inputs = 1;
}

// A session message sent by the client to the Function Executor in run task allocations session.
message RunTaskAllocationsSessionClientMessage {
    oneof message {
        OpenSessionRequest open_session_request = 1;
        UploadSerializedObjectRequest upload_serialized_object_request = 2;
        UploadSerializedObjectResponse upload_serialized_object_response = 3;
        RunTaskAllocationsRequest run_task_allocations_request = 4;
        SetInvocationStateResponse set_invocation_state_response = 5;
        GetInvocationStateResponse get_invocation_state_response = 6;
        LeaveSessionRequest leave_session_request = 7;
    }
}

message OpenSessionResponse {
    optional google.rpc.Status status = 1;
    // True if a new session was created.
    optional bool is_new = 2;
}

message LeaveSessionResponse {
    optional google.rpc.Status status = 1;
}

message TaskAllocationOutput {
    optional string graph_invocation_id = 1;
    optional string task_id = 2;
    optional string allocation_id = 3;
    optional TaskOutcomeCode outcome_code = 4;
    optional TaskFailureReason failure_reason = 5;
    repeated SerializedObjectID function_outputs = 6;
    // User payload for invocation error if task failed with invocation error.
    optional SerializedObjectID invocation_error_output = 7;
    optional SerializedObjectID stdout = 8;
    optional SerializedObjectID stderr = 9;
    // Edges that the function wants the invocation to be routed to.
    repeated string next_functions = 10;
    optional Metrics metrics = 11;
}

message RunTaskAllocationsResponse {
    // The status for the whole run task allocations request.
    // If the status is not OK, the outputs field is empty.
    // If the status is OK, the outputs field contains the outputs of the task allocations.
    optional google.rpc.Status status = 1;
    // The list of task allocations finished to run with their outputs.
    repeated TaskAllocationOutput outputs = 2;
}

// A session message sent by the Function Executor to the client in run task allocations session.
message RunTaskAllocationsSessionServerMessage {
    oneof message {
        OpenSessionResponse open_session_response = 1;
        UploadSerializedObjectRequest upload_serialized_object_request = 2;
        UploadSerializedObjectResponse upload_serialized_object_response = 3;
        RunTaskAllocationsResponse run_task_allocations_response = 4;
        SetInvocationStateRequest set_invocation_state_request = 5;
        GetInvocationStateRequest get_invocation_state_request = 6;
        LeaveSessionResponse leave_session_response = 7;
    }
}

service FunctionExecutor {
    // Initializes the Function Executor to run tasks
    // for a particular function. This method is called only
    // once per Function Executor as it can only run a single function.
    // It should be called before calling RunTask for the function.
    rpc initialize(InitializeRequest) returns (InitializeResponse);
    // Initializes a server that sends requests to the client to perform actions on
    // a task's graph invocation state. This method is called only once per Function Executor
    // It should be called before calling RunTask for the function.
    // Deprecated.
    rpc initialize_invocation_state_server(stream InvocationStateResponse) returns (stream InvocationStateRequest);
    // Executes the task defined in the request.
    // Multiple tasks can be running in parallel.
    // Deprecated.
    rpc run_task(RunTaskRequest) returns (RunTaskResponse);

    // Creates session streams for running task allocations on Function Executor.
    // A typical message flow is:
    // 1. Client sends OpenSessionRequest to join a session by ID. The session is created if it does not exist.
    // 2. Function Executor responds with OpenSessionResponse.
    // 3. Client uploads task allocation inputs using UploadSerializedObjectRequest. Chunks are sent in original order they appear in the data.
    // 4. Function Executor responds with UploadSerializedObjectResponse for each UploadSerializedObjectRequest.
    // 5. Client sends RunTaskAllocationsRequest with task allocations to run. The task allocations reference their inputs by SerializedObjectID.
    // 6. Function Executor is running the task allocations.
    // 7. Function Executor may send InvocationStateRequest to the client to perform actions on the task's graph invocation state.
    // 8. Client responds to each InvocationStateRequest with InvocationStateResponse.
    // 9. Once the Function Executor finishes running a task allocation, it sends its outputs using UploadSerializedObjectRequest to client.
    //    Chunks are sent in original order they appear in the data.
    // 10. Client responds to each UploadSerializedObjectRequest with UploadSerializedObjectResponse.
    // 11. After a task allocations' outputs were uploaded to client, Function Executor sends RunTaskAllocationsResponse with details of
    //     the task allocation outputs. The outputs reference their serialized objects by SerializedObjectID. Currently only one RunTaskAllocationsResponse
    //     is sent per RunTaskAllocationsRequest.
    // 12. Client closes the session using LeaveSessionRequest with close=true.
    // 13. Function Executor release all resources associated with the session (e.g. task allocations' inputs and outputs) and responds with
    //     LeaveSessionResponse.
    rpc run_task_allocations_session(stream RunTaskAllocationsSessionClientMessage) returns (stream RunTaskAllocationsSessionServerMessage);

    // Health check method to check if the FE is able to run tasks.
    // The FE should be initialized before calling this method.
    rpc check_health(HealthCheckRequest) returns (HealthCheckResponse);
    // Information about this Function Executor.
    rpc get_info(InfoRequest) returns (InfoResponse);
}
