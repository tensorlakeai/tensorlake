# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from tensorlake.function_executor.proto import (
    function_executor_pb2 as tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2,
)

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in tensorlake/function_executor/proto/function_executor_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class FunctionExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.initialize = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/initialize",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeResponse.FromString,
            _registered_method=True,
        )
        self.initialize_invocation_state_server = channel.stream_stream(
            "/function_executor_service.FunctionExecutor/initialize_invocation_state_server",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateResponse.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateRequest.FromString,
            _registered_method=True,
        )
        self.list_tasks = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/list_tasks",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksResponse.FromString,
            _registered_method=True,
        )
        self.create_task = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/create_task",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.CreateTaskRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Task.FromString,
            _registered_method=True,
        )
        self.await_task = channel.unary_stream(
            "/function_executor_service.FunctionExecutor/await_task",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskProgress.FromString,
            _registered_method=True,
        )
        self.delete_task = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/delete_task",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.DeleteTaskRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Empty.FromString,
            _registered_method=True,
        )
        self.check_health = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/check_health",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckResponse.FromString,
            _registered_method=True,
        )
        self.get_info = channel.unary_unary(
            "/function_executor_service.FunctionExecutor/get_info",
            request_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoRequest.SerializeToString,
            response_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoResponse.FromString,
            _registered_method=True,
        )


class FunctionExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def initialize(self, request, context):
        """Initializes the Function Executor to run tasks
        for a particular function. This method is called only
        once per Function Executor as it can only run a single function.
        It should be called before calling RunTask for the function.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def initialize_invocation_state_server(self, request_iterator, context):
        """Initializes a server that sends requests to the client to perform actions on
        a task's graph invocation state. This method is called only once per Function Executor
        It should be called before calling RunTask for the function.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_tasks(self, request, context):
        """Lists the currently-running tasks."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def create_task(self, request, context):
        """Creates and starts the task specified in the request."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def await_task(self, request, context):
        """Sends progress updates for the task.
        Sends its result once it's complete.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete_task(self, request, context):
        """Deletes the task."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def check_health(self, request, context):
        """Health check method to check if the FE is able to run tasks.
        The FE should be initialized before calling this method.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get_info(self, request, context):
        """Information about this Function Executor."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FunctionExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "initialize": grpc.unary_unary_rpc_method_handler(
            servicer.initialize,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeResponse.SerializeToString,
        ),
        "initialize_invocation_state_server": grpc.stream_stream_rpc_method_handler(
            servicer.initialize_invocation_state_server,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateResponse.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateRequest.SerializeToString,
        ),
        "list_tasks": grpc.unary_unary_rpc_method_handler(
            servicer.list_tasks,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksResponse.SerializeToString,
        ),
        "create_task": grpc.unary_unary_rpc_method_handler(
            servicer.create_task,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.CreateTaskRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Task.SerializeToString,
        ),
        "await_task": grpc.unary_stream_rpc_method_handler(
            servicer.await_task,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskProgress.SerializeToString,
        ),
        "delete_task": grpc.unary_unary_rpc_method_handler(
            servicer.delete_task,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.DeleteTaskRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Empty.SerializeToString,
        ),
        "check_health": grpc.unary_unary_rpc_method_handler(
            servicer.check_health,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckResponse.SerializeToString,
        ),
        "get_info": grpc.unary_unary_rpc_method_handler(
            servicer.get_info,
            request_deserializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoRequest.FromString,
            response_serializer=tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "function_executor_service.FunctionExecutor", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "function_executor_service.FunctionExecutor", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class FunctionExecutor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def initialize(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/initialize",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InitializeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def initialize_invocation_state_server(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/function_executor_service.FunctionExecutor/initialize_invocation_state_server",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateResponse.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InvocationStateRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def list_tasks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/list_tasks",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.ListTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def create_task(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/create_task",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.CreateTaskRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Task.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def await_task(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/function_executor_service.FunctionExecutor/await_task",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.AwaitTaskProgress.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def delete_task(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/delete_task",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.DeleteTaskRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def check_health(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/check_health",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get_info(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/function_executor_service.FunctionExecutor/get_info",
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoRequest.SerializeToString,
            tensorlake_dot_function__executor_dot_proto_dot_function__executor__pb2.InfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
